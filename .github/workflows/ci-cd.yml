name: CI/CD Pipeline for Serverless Project

on:
  push:
    branches:
      - main         # Trigger the workflow on pushes to the 'main' branch
  pull_request:
    branches:
      - main         # Trigger on pull requests to 'main'

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'  # Specify Node.js version for Serverless Framework

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'  # Set the version of Terraform you want

      - name: Install dependencies
        run: |
          npm install  # Install Node.js dependencies for Serverless
          terraform init  # Initialize Terraform configuration

      - name: Run Tests
        run: |
          npm test  # Run any tests for your Node.js app
        working-directory: infra

      - name: Terraform Plan
        run: terraform plan  # Check Terraform configuration changes

  deploy:
    runs-on: ubuntu-latest
    needs: setup
    environment:
      name: production  # Optional, you can define environments like 'production'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'  # Specify your AWS region

      # - name: Deploy with Serverless Framework
      #   run: |
      #     npx serverless deploy  # Deploy using Serverless Framework
      - name: Deploy with Serverless Framework
        run: npx serverless deploy
        working-directory: ./infra/serverless.yml  # Adjust path if serverless.yml is in a subfolder

      - name: Terraform Apply
        run: terraform apply -auto-approve  # Apply Terraform configuration changes
