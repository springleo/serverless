name: CI/CD Pipeline for Serverless Project

on:
  push:
    branches:
      - main         # Trigger the workflow on pushes to the 'main' branch
  pull_request:
    branches:
      - main         # Trigger on pull requests to 'main'
  workflow_dispatch:
    inputs:
      action:
        description: "Specify the Terraform action (apply or destroy)"
        required: true
        default: "apply"

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'  # Specify Node.js version for Serverless Framework

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'  # Set the version of Terraform you want

      - name: Install dependencies
        run: |
          cd infra
          npm install  # Install Node.js dependencies for Serverless


  deploy:
    runs-on: ubuntu-latest
    needs: setup
    environment:
      name: production  # Optional, you can define environments like 'production'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-south-1'  # Specify your AWS region

      # - name: Debug Environment
      #   run: echo $SERVERLESS_ACCESS_KEY
      #   env:
      #     SERVERLESS_ACCESS_KEY: ${{ env.SERVERLESS_ACCESS_KEY }}

      # - name: Login to  Serverless Framework
      #   run: npx serverless login
      #   working-directory: infra  # Adjust path if serverless.yml is in a subfolder
      #   env:
      #     SERVERLESS_ACCESS_KEY: ${{ env.SERVERLESS_ACCESS_KEY }}
      - name: TF init
        run: |
          cd infra
          terraform init  # Initialize Terraform configuration

      - name: Refresh Terraform State
        run: terraform refresh
        working-directory: infra

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform plan -out=tfplan
        working-directory: infra
        env:
          TF_ACTION: ${{ github.event.inputs.action }}

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve tfplan
        working-directory: infra
        
      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -auto-approve
        working-directory: infra